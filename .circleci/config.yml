# https://circleci.com/docs/2.0/configuration-reference/
aliases:
  - &init-gcloud |
    echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
  # standard semver regex as defined in: https://semver.org/
  - &release-regex /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  - &release-branch-regex /^release-\d+\.\d+$/
version: 2.1
orbs:
  win: circleci/windows@2.1.0

executors:
  golang-ci:
    docker:
      - image: okteto/golang-ci:1.17.10

jobs:
  build:
    executor: golang-ci
    resource_class: large
    steps:
      - checkout
      - run:
          command: go mod tidy && git diff --exit-code go.sum > /dev/null
      - run:
          name: Test
          command: |
            make test
            bash <(curl -s https://codecov.io/bash)
      - run: make build-integration
      - run: env VERSION_STRING=$CIRCLE_TAG make -j 3 build-all
      - run: env VERSION_STRING=$CIRCLE_TAG make latest
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: bin
          destination: binaries
      - store_artifacts:
          path: coverage.txt
          destination: coverage.txt
  test-integration:
    executor: golang-ci
    resource_class: large
    environment:
      OKTETO_URL: https://staging.okteto.dev/
      OKTETO_USER: cindylopez
      OKTETO_APPS_SUBDOMAIN: staging.okteto.net
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-pkg-cache-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Prepare env
          command: |
            mkdir -p $HOME/.okteto
            touch $HOME/.okteto/.noanalytics
            echo $HOME
            sudo chown -R $(whoami) /usr/local/bin
            curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
            cp $(pwd)/artifacts/bin/okteto-Linux-x86_64 /usr/local/bin/okteto
            /usr/local/bin/okteto login --token ${API_STAGING_TOKEN}
      - run:
          name: Integration tests
          environment:
            OKTETO_SKIP_CLEANUP: 'true'
          command: make integration
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: /root/.okteto
  test-release:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh 0.0.1 $sha $sha_arm
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Build Docker container
          command: |
            export DOCKER_BUILDKIT=1
            docker build -t okteto --build-arg VERSION_STRING=$CIRCLE_SHA1 .

  test-windows:
    executor: win/default
    environment:
      OKTETO_USER: cindylopez
    steps:
      - checkout
      - run:
          name: Upgrade Golang
          command: choco upgrade golang --version 1.17
      - restore_cache:
          keys:
            - v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: |
            go mod download
            go version
            go test ./...
      - run:
          name: Upgrade kubectl
          command: choco install kubernetes-cli
      - run:
          name: Upgrade helm
          command: choco install kubernetes-helm
      - attach_workspace:
          at: .\artifacts
      - run:
          name: Prepare env
          environment:
            OKTETO_URL: https://staging.okteto.dev/
          command: |
            new-item $HOME\.okteto -itemtype "directory" -force
            new-item $HOME\.okteto\.noanalytics -itemtype "file" -value "noanalytics" -force
            & 'C:\Users\circleci\project\artifacts\bin\okteto.exe' login --token $env:API_STAGING_TOKEN
      - run:
          name: Integration tests
          environment:
            OKTETO_URL: https://staging.okteto.dev/
            OKTETO_APPS_SUBDOMAIN: staging.okteto.net
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
            OKTETO_SKIP_CLEANUP: 'true'
          command: |
            go test github.com/okteto/okteto/integration -tags="common integration actions" --count=1 -v -timeout 1h
      - save_cache:
          key: v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
          paths:
            - C:\Users\circleci\AppData\Local\go-build
            - C:\Users\circleci\go\pkg
            - C:\Go\pkg
      - store_artifacts:
          path: C:\Users\circleci\.okteto

  push-image-tag:
    executor: golang-ci
    steps:
      - checkout
      - setup_remote_docker:
          version: '19.03.8'
      - run: ./scripts/ci/push-image.sh "$CIRCLE_TAG"

  push-image-latest:
    executor: golang-ci
    steps:
      - checkout
      - setup_remote_docker:
          version: '19.03.8'
      - run: ./scripts/ci/push-image.sh latest

  release-external:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - setup_remote_docker:
          version: '19.03.8'
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh $CIRCLE_TAG $sha $sha_arm
            pushd homebrew-cli
            git push git@github.com:okteto/homebrew-cli.git master
      - deploy:
          name: Auto-update-actions
          command: ./scripts/ci/release-github-actions.sh $CIRCLE_TAG

  release:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - run: ./scripts/ci/release.sh

  release-branch:
    executor: golang-ci
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - a1:66:22:e1:67:66:fb:d6:3b:a2:7a:6c:d9:9a:46:ba
      - run: ./scripts/ci/release-branch.sh


workflows:
  version: 2

  test:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - build:
          filters:
            branches:
              ignore: *release-branch-regex
            tags:
              ignore: /.*/
      - test-windows:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /.*(windows|win)/
      - test-integration:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /.*(e2e)/
      - test-release:
          context: GKE
          requires:
            - build
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - master
                - *release-branch-regex
      - push-image-latest:
          requires:
            - build
          filters:
            branches:
              only: master

  release-branch:
    jobs:
      - build:
          filters:
            branches:
              only: *release-branch-regex
            tags:
              ignore: /.*/
      - test-integration:
          filters:
            branches:
              only: *release-branch-regex
          requires:
            - build
      - release-branch:
          requires:
            - build
            - test-integration
          filters:
            branches:
              only: *release-branch-regex

  release-dev:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release-dev", << pipeline.schedule.name >>]
    jobs:
      - build
      - push-image-tag:
          requires:
            - build
      - release:
          context: GKE
          requires:
            - build
            - push-image-tag

  release:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - push-image-tag:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - release:
          context: GKE
          requires:
            - build
            - push-image-tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - release-external:
          context: GKE
          requires:
            - release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
