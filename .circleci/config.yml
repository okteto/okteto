# https://circleci.com/docs/2.0/configuration-reference/
aliases:
  - &init-gcloud |
    echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
version: 2.1
orbs:
  win: circleci/windows@2.1.0
jobs:
  build:
    docker:
      - image: okteto/golang-ci:1.16
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-pkg-cache-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: |
            make test
            bash <(curl -s https://codecov.io/bash)
      - run: env VERSION_STRING=$CIRCLE_TAG make -j 3 build-all
      - run: env VERSION_STRING=$CIRCLE_TAG make latest
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - save_cache:
          key: v3-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: bin
          destination: binaries
      - store_artifacts:
          path: coverage.txt
          destination: coverage.txt
  integration:
    environment:
      OKTETO_USER: cindylopez
    docker:
      - image: okteto/dev:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-pkg-cache-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Prepare env
          command: |
            mkdir -p $HOME/.okteto
            touch $HOME/.okteto/.noanalytics
            echo $HOME
            curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
            cp $(pwd)/artifacts/bin/okteto-Linux-x86_64 /usr/local/bin/okteto
            /usr/local/bin/okteto login --token ${API_TOKEN}
      - run:
          name: Integration tests (serverside)
          environment:
            OKTETO_CLIENTSIDE_TRANSLATION: ''
            OKTETO_SKIP_CLEANUP: 'true'
          command: make integration
      - run:
          name: Integration tests (clientside)
          environment:
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_CLIENTSIDE_TRANSLATION: 'true'
          command: make integration
      - save_cache:
          key: v3-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: /root/.okteto
  mock-release:
    docker:
      - image: okteto/golang-ci:1.16
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - add_ssh_keys:
          fingerprints:
            - 94:5d:82:26:14:51:a6:99:79:c6:a7:d8:87:4a:64:3b
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./update_homebrew_formula.sh 0.0.1 $sha $sha_arm
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Build Docker container
          command: |
            export DOCKER_BUILDKIT=1
            docker build -t okteto --build-arg VERSION_STRING=$CIRCLE_SHA1 .

  windows-unit:
    environment:
      OKTETO_USER: cindylopez
    executor: win/default
    steps:
      - checkout
      - run:
          name: Upgrade Golang
          command: choco upgrade golang --version 1.16
      - restore_cache:
          keys:
            - v4-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: |
            go mod download
            go version
            go test ./...
      - run:
          name: Upgrade kubectl
          command: choco install kubernetes-cli
      - attach_workspace:
          at: .\artifacts
      - run:
          name: Prepare env
          command: |
            new-item $HOME\.okteto -itemtype "directory" -force
            new-item $HOME\.okteto\.noanalytics -itemtype "file" -value "noanalytics" -force
            & 'C:\Users\circleci\project\artifacts\bin\okteto.exe' login --token $env:API_TOKEN
      - run:
          name: Integration tests (serverside)
          environment:
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_CLIENTSIDE_TRANSLATION: ''
          command: |
            go test github.com/okteto/okteto/integration -tags=integration --count=1 -v -timeout 15m
      - run:
          name: Integration tests (clientside)
          environment:
            OKTETO_PATH: 'C:\Users\circleci\project\artifacts\bin\okteto.exe'
            OKTETO_CLIENTSIDE_TRANSLATION: 'true'
            OKTETO_SKIP_CLEANUP: 'true'
          command: |
            go test github.com/okteto/okteto/integration -tags=integration --count=1 -v -timeout 15m
      - save_cache:
          key: v4-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
          paths:
            - C:\Users\circleci\AppData\Local\go-build
            - C:\Users\circleci\go\pkg
            - C:\Go\pkg
      - store_artifacts:
          path: C:\Users\circleci\.okteto
  release:
    docker:
      - image: okteto/golang-ci:1.16
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - run:
          name: Upload release binaries
          command: |
            gsutil -m rsync -r ./artifacts/bin gs://downloads.okteto.com/cli/${CIRCLE_TAG}
            gsutil -m rsync -r gs://downloads.okteto.com/cli/${CIRCLE_TAG}/ gs://downloads.okteto.com/cli/
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Publish Docker container
          command: |
            export DOCKER_BUILDKIT=1
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t okteto/okteto:${CIRCLE_TAG} --build-arg VERSION_STRING=$CIRCLE_TAG .
            docker push okteto/okteto:${CIRCLE_TAG}
      - run:
          name: Publish Release on GitHub
          command: |
            go get -u github.com/tcnksm/ghr
            ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -token $GITHUB_TOKEN -replace $CIRCLE_TAG  ./artifacts/bin/
      - add_ssh_keys:
          fingerprints:
            - 94:5d:82:26:14:51:a6:99:79:c6:a7:d8:87:4a:64:3b
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./update_homebrew_formula.sh $CIRCLE_TAG $sha $sha_arm
            pushd homebrew-cli
            git push git@github.com:okteto/homebrew-cli.git master
  release-master:
    docker:
      - image: okteto/golang-ci:1.16
    steps:
      - checkout
      - setup_remote_docker:
          version: '19.03.8'
      - run:
          name: Publish Docker container
          command: |
            export DOCKER_BUILDKIT=1
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t okteto/okteto:latest --build-arg VERSION_STRING=$CIRCLE_SHA1 .
            docker push okteto/okteto:latest
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - run:
          name: Upload latest binaries
          command: |
            gsutil -m rsync -r ./artifacts/bin gs://downloads.okteto.com/cli/master

workflows:
  version: 2
  build-release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - integration:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /.*(e2e)/
                - /.*(integration)/
      - mock-release:
          context: GKE
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              ignore: master
      - release-master:
          context: GKE
          requires:
            - integration
          filters:
            branches:
              only: master
      - release:
          context: GKE
          requires:
            - build
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - windows-unit:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /.*(windows|win)/
