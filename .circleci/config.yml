# https://circleci.com/docs/2.0/configuration-reference/
aliases:
  - &init-gcloud |
    echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
    gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
    gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
  # standard semver regex as defined in: https://semver.org/
  - &release-regex /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  - &release-branch-regex /^release-\d+\.\d+$/
  - &okteto-login |
    curl https://get.okteto.com -sSfL | sh
    mkdir -p $HOME/.okteto
    touch $HOME/.okteto/.noanalytics
    okteto context use ${OKTETO_URL} --token ${OKTETO_TOKEN}
  - &docker-login echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
version: 2.1

parameters:
  # The following parameters are filled by GH Actions to run CircleCI jobs
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""


orbs:
  win: circleci/windows@5.0.0
commands:
  integration-actions:
    steps:
      - run:
          name: Run actions integration tests
          command: make integration-actions

  integration-build:
    steps:
      - run:
          name: Run build integration tests
          command: make integration-build

  integration-deploy:
    steps:
      - run:
          name: Run deploy integration tests
          command: make integration-deploy

  integration-up:
    steps:
      - run:
          name: Run up integration tests
          command: make integration-up
          environment:
            OKTETO_SKIP_CLEANUP: 'true'

  integration-okteto:
    steps:
      - run:
          name: Run okteto integration tests
          command: make integration-okteto

  integration-deprecated:
    steps:
      - run:
          name: Run deprecated integration tests
          command: make integration-deprecated


executors:
  golang-ci:
    docker:
      - image: okteto/golang-ci:2.3.1

jobs:
  golangci-lint:
    executor: golang-ci
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - golangci-lint-cache-v2-{{ checksum ".golangci.yml" }}-{{ checksum "go.sum" }}
      - run: golangci-lint run -v --timeout 5m
      - save_cache:
          key: golangci-lint-cache-v2-{{ checksum ".golangci.yml" }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/golangci-lint
            - ~/.cache/go-build

  build-binaries:
    executor: golang-ci
    resource_class: large
    steps:
      - checkout
      - run:
          name: Build all binaries
          command: env VERSION_STRING=$CIRCLE_TAG make -j 3 build-all
      - run:
          name: Add version string
          command: env VERSION_STRING=$CIRCLE_TAG make latest
      - persist_to_workspace:
          root: .
          paths:
            - bin
      - store_artifacts:
          path: bin
          destination: binaries
  run-unit-test:
    executor: golang-ci
    steps:
      - checkout
      - run:
          name: Compile integration tests
          command: make build-integration
      - run:
          name: Test
          command: |
            make test
            bash <(curl -s https://codecov.io/bash)
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: coverage.txt
          destination: coverage.txt
  run-windows-unit-test:
    executor: win/default
    environment:
      OKTETO_USER: cindylopez
    steps:
      - checkout
      - run:
          name: Check Golang version
          command: go version
      - restore_cache:
          keys:
            - v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
      - run:
          name: Run unit tests
          command: |
            go mod download
            go version
            go test ./...
  test-integration:
    executor: golang-ci
    resource_class: large
    environment:
      OKTETO_URL: https://staging.okteto.dev/
      OKTETO_USER: cindylopez
      OKTETO_APPS_SUBDOMAIN: staging.okteto.net
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-pkg-cache-{{ checksum "go.sum" }}
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Prepare env
          command: |
            mkdir -p $HOME/.okteto
            touch $HOME/.okteto/.noanalytics
            echo $HOME
            sudo chown -R $(whoami) /usr/local/bin
            curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
            chmod +x /usr/local/bin/kubectl
            cp $(pwd)/artifacts/bin/okteto-Linux-x86_64 /usr/local/bin/okteto
            /usr/local/bin/okteto login --token ${API_STAGING_TOKEN}
      - integration-deploy
      - integration-up
      - integration-actions
      - integration-okteto
      - integration-deprecated
      - integration-build
      - save_cache:
          key: v4-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - /go/pkg
      - store_artifacts:
          path: /root/.okteto
  test-release:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh 0.0.1 $sha $sha_arm
      - run: *okteto-login
      - run:
          name: Build Docker container
          command: |
            okteto build --platform "linux/arm64,linux/amd64" --build-arg VERSION_STRING=$CIRCLE_SHA1 -f Dockerfile .

  run-windows-e2e-test:
    executor: win/default
    environment:
      OKTETO_USER: cindylopez
    steps:
      - checkout
      - run:
          name: Check Golang version
          command: go version
      - restore_cache:
          keys:
            - v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
      - run:
          name: Run unit tests
          command: |
            go mod download
            go version
            go test ./...
      - run:
          name: Upgrade kubectl
          command: choco install kubernetes-cli -y
      - run:
          name: Upgrade helm
          command: choco install kubernetes-helm -y
      - attach_workspace:
          at: .\artifacts
      - run:
          name: Prepare env
          environment:
            OKTETO_URL: https://staging.okteto.dev/
          command: |
            new-item $HOME\.okteto -itemtype "directory" -force
            new-item $HOME\.okteto\.noanalytics -itemtype "file" -value "noanalytics" -force
            & "$($HOME)\project\artifacts\bin\okteto.exe" login --token $env:API_STAGING_TOKEN
            & "$($HOME)\project\artifacts\bin\okteto.exe" kubeconfig
      - run:
          name: Run deprecated integration tests
          environment:
            OKTETO_URL: https://staging.okteto.dev/
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_APPS_SUBDOMAIN: staging.okteto.net
          command: |
            $env:OKTETO_PATH="$($HOME)\project\artifacts\bin\okteto.exe"
            $env:Path+=";$($HOME)\project\artifacts\bin"
            go test github.com/okteto/okteto/integration/deprecated/push -tags="integration" --count=1 -v -timeout 15m
            go test github.com/okteto/okteto/integration/deprecated/stack -tags="integration" --count=1 -v -timeout 15m
      - run:
          name: Run build integration tests
          environment:
            OKTETO_URL: https://staging.okteto.dev/
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_APPS_SUBDOMAIN: staging.okteto.net
          command: |
            $env:OKTETO_PATH="$($HOME)\project\artifacts\bin\okteto.exe"
            go test github.com/okteto/okteto/integration/build -tags="integration" --count=1 -v -timeout 10m
      - run:
          name: Run deploy integration tests
          environment:
            OKTETO_URL: https://staging.okteto.dev/
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_APPS_SUBDOMAIN: staging.okteto.net
          command: |
            $env:OKTETO_PATH="$($HOME)\project\artifacts\bin\okteto.exe"
            $env:Path+=";$($HOME)\project\artifacts\bin"
            go test github.com/okteto/okteto/integration/deploy -tags="integration" --count=1 -v -timeout 20m
      - run:
          name: Run up integration tests
          environment:
            OKTETO_URL: https://staging.okteto.dev/
            OKTETO_SKIP_CLEANUP: 'true'
            OKTETO_APPS_SUBDOMAIN: staging.okteto.net
          command: |
            $env:OKTETO_PATH="$($HOME)\project\artifacts\bin\okteto.exe"
            $env:Path+=";$($HOME)\project\artifacts\bin"
            go test github.com/okteto/okteto/integration/up -tags="integration" --count=1 -v -timeout 45m
      - store_artifacts:
          path: C:\Users\circleci\.okteto

      - save_cache:
          key: v5-pkg-cache-windows-1-15-{{ checksum "go.sum" }}
          paths:
            - C:\Users\circleci\AppData\Local\go-build
            - C:\Users\circleci\go\pkg
            - C:\Go\pkg

  push-image-tag:
    executor: golang-ci
    steps:
      - checkout
      - run: *okteto-login
      - run: *docker-login
      - run: ./scripts/ci/push-image.sh "$CIRCLE_TAG" "linux/amd64,linux/arm64"

  push-image-latest:
    executor: golang-ci
    steps:
      - checkout
      - run: *okteto-login
      - run: *docker-login
      - run: ./scripts/ci/push-image.sh latest "linux/amd64"

  upload-static:
    executor: golang-ci
    steps:
      - checkout
      - run: *init-gcloud
      - run: 'gsutil -m -h "Cache-Control: no-store" -h "Content-Type: text/x-sh" cp ./scripts/get-okteto.sh gs://get.okteto.com/get-okteto.sh'

  release-external:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - add_ssh_keys:
          fingerprints:
            - f7:81:9f:b4:31:3a:4d:46:ce:cf:54:a2:70:46:5a:df
      - deploy:
          name: Update brew formula
          command: |
            sha=$(cat ./artifacts/bin/okteto-Darwin-x86_64.sha256 | awk '{print $1}')
            sha_arm=$(cat ./artifacts/bin/okteto-Darwin-arm64.sha256 | awk '{print $1}')
            ./scripts/update_homebrew_formula.sh $CIRCLE_TAG $sha $sha_arm
            pushd homebrew-cli
            git push git@github.com:okteto/homebrew-cli.git master
      - deploy:
          name: Auto-update-actions
          command: ./scripts/ci/release-github-actions.sh $CIRCLE_TAG

  release:
    executor: golang-ci
    steps:
      - checkout
      - attach_workspace:
          at: ./artifacts
      - run: *init-gcloud
      - run: ./scripts/ci/release.sh

  release-branch:
    executor: golang-ci
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - a1:66:22:e1:67:66:fb:d6:3b:a2:7a:6c:d9:9a:46:ba
      - run: ./scripts/ci/release-branch.sh


workflows:
  upload-static:
    jobs:
      - upload-static:
          context: GKE
          filters:
            branches:
              only:
                - master
  lint-build-test:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - golangci-lint
      - build-binaries:
          requires:
            - "golangci-lint"
          filters:
            branches:
              ignore: *release-branch-regex
            tags:
              ignore: /.*/
      - run-unit-test:
          requires:
            - "golangci-lint"
          filters:
            branches:
              ignore: *release-branch-regex
            tags:
              ignore: /.*/
      - run-windows-unit-test:
          requires:
            - "golangci-lint"
          filters:
            branches:
              ignore: *release-branch-regex
            tags:
              ignore: /.*/
      - run-windows-e2e-test:
          requires:
            - build-binaries
          filters:
            branches:
              only:
                - master
                - /.*(windows|win)/
      - test-integration:
          requires:
            - build-binaries
          filters:
            branches:
              only:
                - master
                - /.*(e2e)/
      - test-release:
          context:
            - GKE
            - Product-okteto-dev
          requires:
            - build-binaries
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - master
                - *release-branch-regex
      - push-image-latest:
          context: Product-okteto-dev
          requires:
            - build-binaries
          filters:
            branches:
              only: master

  release-branch:
    jobs:
      - build-binaries:
          filters:
            branches:
              only: *release-branch-regex
            tags:
              ignore: /.*/
      - run-unit-test:
          filters:
            branches:
              only: *release-branch-regex
            tags:
              ignore: /.*/
      - run-windows-unit-test:
          filters:
            branches:
              only: *release-branch-regex
            tags:
              ignore: /.*/
      - test-integration:
          filters:
            branches:
              only: *release-branch-regex
          requires:
            - build-binaries
      - release-branch:
          requires:
            - build-binaries
            - test-integration
            - run-unit-test
            - run-windows-unit-test
          filters:
            branches:
              only: *release-branch-regex

  release-dev:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["release-dev", << pipeline.schedule.name >>]
    jobs:
      - build-binaries
      - run-unit-test
      - run-windows-unit-test
      - push-image-tag:
          context: Product-okteto-dev
          requires:
            - build-binaries
      - release:
          context: GKE
          requires:
            - build-binaries
            - push-image-tag

  release:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - build-binaries:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - run-unit-test:
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: *release-regex
      - run-windows-unit-test:
          filters:
            branches:
              ignore: /.*/
            tags:
              ignore: *release-regex
      - push-image-tag:
          context: Product-okteto-dev
          requires:
            - build-binaries
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - release:
          context: GKE
          requires:
            - build-binaries
            - push-image-tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - *release-regex
      - release-external:
          context: GKE
          requires:
            - release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/

  run-windows-e2e:
    when:
      equal: ["run-e2e-windows", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build-binaries
      - run-windows-e2e-test:
          requires:
            - build-binaries
  run-unix-e2e-tests:
    when:
      equal: ["run-e2e-unix", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build-binaries
      - test-integration:
          requires:
            - build-binaries

  run-e2e-tests:
    when:
      equal: ["run-e2e", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build-binaries
      - test-integration:
          requires:
            - build-binaries
      - run-windows-e2e-test:
          requires:
            - build-binaries
